import 'package:flutter/material.dart';
import 'package:fokad_admin/src/api/auth/auth_api.dart';
import 'package:fokad_admin/src/api/exploitations/rapport_api.dart';
import 'package:fokad_admin/src/api/exploitations/taches_api.dart';
import 'package:fokad_admin/src/constants/app_theme.dart';
import 'package:fokad_admin/src/constants/responsive.dart';
import 'package:fokad_admin/src/models/exploitations/rapport_model.dart';
import 'package:fokad_admin/src/models/exploitations/tache_model.dart';
import 'package:fokad_admin/src/models/users/user_model.dart';
import 'package:fokad_admin/src/navigation/drawer/drawer_menu.dart';
import 'package:fokad_admin/src/navigation/header/custom_appbar.dart';
import 'package:fokad_admin/src/utils/loading.dart';
import 'package:fokad_admin/src/widgets/btn_widget.dart';
import 'package:fokad_admin/src/widgets/print_widget.dart';
import 'package:fokad_admin/src/widgets/title_widget.dart';
import 'package:intl/intl.dart';
import 'package:timeago/timeago.dart' as timeago;

final _lightColors = [
  Colors.pinkAccent.shade700,
  Colors.tealAccent.shade700,
  Colors.amber.shade700,
  Colors.lightGreen.shade700,
  Colors.lightBlue.shade700,
  Colors.orange.shade700,
];

class DetailTache extends StatefulWidget {
  const DetailTache({Key? key}) : super(key: key);

  @override
  State<DetailTache> createState() => _DetailTacheState();
}

class _DetailTacheState extends State<DetailTache> {
  final GlobalKey<ScaffoldState> _key = GlobalKey();
  final _formKey = GlobalKey<FormState>();
  bool isLoading = false;
  bool isLoadingRead = false;

  TextEditingController rapportController = TextEditingController();

  @override
  initState() {
    getData();
    super.initState();
  }

  @override
  void dispose() {
    rapportController.dispose();
    super.dispose();
  }

  String? signature;
  Future<void> getData() async {
    UserModel userModel = await AuthApi().getUserId();
    setState(() {
      signature = userModel.matricule;
    });
  }

  @override
  Widget build(BuildContext context) {
    final id = ModalRoute.of(context)!.settings.arguments as int;
    return Scaffold(
        key: _key,
        drawer: const DrawerMenu(),
        body: SafeArea(
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (Responsive.isDesktop(context))
                const Expanded(
                  child: DrawerMenu(),
                ),
              Expanded(
                flex: 5,
                child: Padding(
                    padding: const EdgeInsets.all(p10),
                    child: FutureBuilder<TacheModel>(
                        future: TachesApi().getOneData(id),
                        builder: (BuildContext context,
                            AsyncSnapshot<TacheModel> snapshot) {
                          if (snapshot.hasData) {
                            TacheModel? data = snapshot.data;
                            return Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    SizedBox(
                                      width: p20,
                                      child: IconButton(
                                          onPressed: () =>
                                              Navigator.pop(context),
                                          icon: const Icon(Icons.arrow_back)),
                                    ),
                                    const SizedBox(width: p10),
                                    Expanded(
                                      child: CustomAppbar(
                                          title: data!.nomProjet,
                                          controllerMenu: () =>
                                              _key.currentState!.openDrawer()),
                                    ),
                                  ],
                                ),
                                Expanded(
                                    child: SingleChildScrollView(
                                        child: pageDetail(data)))
                              ],
                            );
                          } else {
                            return Center(child: loading());
                          }
                        })),
              ),
            ],
          ),
        ));
  }

  Widget pageDetail(TacheModel data) {
    return Row(mainAxisAlignment: MainAxisAlignment.center, children: [
      Card(
        elevation: 10,
        child: Container(
          margin: const EdgeInsets.all(p16),
          width: (Responsive.isDesktop(context))
              ? MediaQuery.of(context).size.width / 2
              : MediaQuery.of(context).size.width,
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(p10),
            border: Border.all(
              color: Colors.blueGrey.shade700,
              width: 2.0,
            ),
          ),
          child: Column( 
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const TitleWidget(title: 'Votre tache'),
                  Column(
                    children: [
                      PrintWidget(
                          tooltip: 'Imprimer le document', onPressed: () {}),
                      SelectableText(
                          DateFormat("dd-MM-yyyy HH:mm").format(data.created),
                          textAlign: TextAlign.start),
                    ],
                  )
                ],
              ),
              dataWidget(data),
              Divider(
                color: Colors.amber.shade700,
              ),
              if (data.signatureResp == signature && data.read == false) checkboxRead(data),
              if (data.agent == signature) rapportWidget(data),
              Divider(
                color: Colors.amber.shade700,
              ),
              listRapport(data),
            ],
          ),
        ),
      ),
    ]);
  }

  Color getColor(Set<MaterialState> states) {
    const Set<MaterialState> interactiveStates = <MaterialState>{
      MaterialState.pressed,
      MaterialState.hovered,
      MaterialState.focused,
    };
    if (states.any(interactiveStates.contains)) {
      return Colors.red;
    }
    return Colors.green;
  }

  checkboxRead(TacheModel data) {
    bool read = false;
    return ListTile(
      leading: (isLoadingRead)
          ? loadingMini()
          : Checkbox(
              checkColor: Colors.white,
              fillColor: MaterialStateProperty.resolveWith(getColor),
              value: data.read,
              onChanged: (bool? value) {
                setState(() {
                  setState(() {
                    isLoadingRead = true;
                  });
                  read = value!;
                  confirmeLecture(data, read);
                });
              },
            ),
      title: const Text("Confirmation de lecture"),
    );
  }

  Widget dataWidget(TacheModel data) {
    final bodyMedium = Theme.of(context).textTheme.bodyMedium;
    return Padding(
      padding: const EdgeInsets.all(p10),
      child: Column(
        children: [
          Row(
            children: [
              Expanded(
                flex: 1,
                child: Text('Nom Projet :',
                    textAlign: TextAlign.start,
                    style: bodyMedium!.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                flex: 3,
                child: SelectableText(data.nomProjet,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Divider(
            color: Colors.amber.shade700,
          ),
          Row(
            children: [
              Expanded(
                flex: 1,
                child: Text('Numero Tache :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                flex: 3,
                child: SelectableText(data.numeroTache,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Divider(
            color: Colors.amber.shade700,
          ),
          Row(
            children: [
              Expanded(
                flex: 1,
                child: Text('Jalon du projet:',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                flex: 3,
                child: SelectableText(data.jalon,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Divider(
            color: Colors.amber.shade700,
          ),
          Row(
            children: [
              Expanded(
                flex: 1,
                child: Text('Agent :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                flex: 3,
                child: SelectableText(data.agent,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Divider(
            color: Colors.amber.shade700,
          ),
          Row(
            children: [
              Expanded(
                flex: 1,
                child: Text('Responsable :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                flex: 3,
                child: SelectableText(data.signatureResp,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Divider(
            color: Colors.amber.shade700,
          ),
          Row(
            children: [
              Expanded(
                flex: 1,
                child: Text('Tâche :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                flex: 3,
                child: SelectableText(data.tache,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
        ],
      ),
    );
  }

  Widget listRapport(TacheModel data) {
    final bodyLarge = Theme.of(context).textTheme.bodyLarge;
    return SizedBox(
        height: 500,
        child: FutureBuilder<List<RapportModel>>(
            future: RapportApi().getAllData(),
            builder: (BuildContext context,
                AsyncSnapshot<List<RapportModel>> snapshot) {
              if (snapshot.hasData) {
                List<RapportModel>? rapports = snapshot.data!
                    .where((element) =>
                        element.nomProjet == data.nomProjet &&
                        element.signature == data.agent)
                    .toList();
                return rapports.isEmpty
                    ? Column(
                        children: [
                          Center(
                            child: Text(
                              "Votre rapport apparait ici.",
                              style: bodyLarge,
                            ),
                          ),
                        ],
                      )
                    : ListView.builder(
                        itemCount: rapports.length,
                        itemBuilder: (context, index) {
                          final rapport = rapports[index];
                          return buildRapport(rapport, index);
                        });
              } else {
                return Center(child: loading());
              }
            }));
  }

  Widget buildRapport(RapportModel rapportModel, int index) {
    final bodySmall = Theme.of(context).textTheme.bodySmall;
    final bodyMedium = Theme.of(context).textTheme.bodyMedium;
    final color = _lightColors[index % _lightColors.length];

    return Card(
      elevation: 10,
      child: Padding(
        padding: const EdgeInsets.all(p10),
        child: Column(
          children: [
            ListTile(
              visualDensity: VisualDensity.comfortable,
              dense: true,
              leading: Icon(Icons.person, color: color, size: 50),
              title: SelectableText(
                rapportModel.signature,
                style: bodySmall,
              ),
              subtitle: SelectableText(
                rapportModel.numeroTache,
                style: bodySmall,
              ),
              trailing: SelectableText(
                  timeago.format(rapportModel.created, locale: 'fr_short'),
                  textAlign: TextAlign.start,
                  style: bodySmall!.copyWith(color: color)),
            ),
            SelectableText(rapportModel.rapport,
                style: bodyMedium, textAlign: TextAlign.justify),
          ],
        ),
      ),
    );
  }

  Widget rapportWidget(TacheModel data) {
    return Padding(
      padding: const EdgeInsets.all(p10),
      child: Form(
        key: _formKey,
        child: Column(
          children: [
            rapportControllerWidget(),
            const SizedBox(
              height: p20,
            ),
            BtnWidget(
                title: 'Soumettre',
                isLoading: isLoading,
                press: () {
                  final form = _formKey.currentState!;
                  if (form.validate()) {
                    submit(data);
                    form.reset();
                  }
                })
          ],
        ),
      ),
    );
  }

  Widget rapportControllerWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: rapportController,
          keyboardType: TextInputType.multiline,
          minLines: 5,
          maxLines: 10,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Ecrivez votre rapport ici...',
          ),
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Future<void> submit(TacheModel data) async {
    final rapportModel = RapportModel(
        nomProjet: data.nomProjet,
        numeroTache: data.numeroTache,
        rapport: rapportController.text,
        signature: signature.toString(),
        created: DateTime.now());
    await RapportApi().insertData(rapportModel);
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(
      content: const Text("Soumis avec succès!"),
      backgroundColor: Colors.green[700],
    ));
  }

  Future<void> confirmeLecture(TacheModel data, bool read) async {
    final tacheModel = TacheModel(
        id: data.id,
        nomProjet: data.nomProjet,
        numeroTache: data.numeroTache,
        agent: data.agent,
        jalon: data.jalon,
        tache: data.tache,
        signatureResp: signature.toString(),
        created: DateTime.now(),
        read: read);

    await TachesApi().updateData(tacheModel);
    Navigator.of(context).pop();
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(
      content: const Text("Modification avec succès!"),
      backgroundColor: Colors.green[700],
    ));
  }
}
