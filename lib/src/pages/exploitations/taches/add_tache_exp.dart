import 'package:flutter/material.dart';
import 'package:fokad_admin/src/api/auth/auth_api.dart';
import 'package:fokad_admin/src/api/exploitations/taches_api.dart';
import 'package:fokad_admin/src/constants/app_theme.dart';
import 'package:fokad_admin/src/constants/responsive.dart';
import 'package:fokad_admin/src/models/exploitations/projet_model.dart';
import 'package:fokad_admin/src/models/exploitations/tache_model.dart';
import 'package:fokad_admin/src/models/users/user_model.dart';
import 'package:fokad_admin/src/navigation/drawer/drawer_menu.dart';
import 'package:fokad_admin/src/navigation/header/custom_appbar.dart';
import 'package:fokad_admin/src/widgets/btn_widget.dart';
import 'package:fokad_admin/src/widgets/print_widget.dart';

class AddTacheExp extends StatefulWidget {
  const AddTacheExp({Key? key}) : super(key: key);

  @override
  State<AddTacheExp> createState() => _AddTacheExpState();
}

class _AddTacheExpState extends State<AddTacheExp> {
  final GlobalKey<ScaffoldState> _key = GlobalKey();
  final ScrollController _controllerScroll = ScrollController();
  final _formKey = GlobalKey<FormState>();
  bool isLoading = false;

  TextEditingController nomProjetController = TextEditingController();
  TextEditingController numeroTacheController = TextEditingController();
  TextEditingController jalonController = TextEditingController();
  TextEditingController tacheController = TextEditingController();
  String? agentRole;
  bool soumettre = false;

  int numeroTache = 0;

  @override
  initState() {
    getData();
    
    numeroTacheController = TextEditingController(text: numeroTache.toString());
    super.initState();
  }

  @override
  void dispose() {
    _controllerScroll.dispose();

    nomProjetController.dispose();
    numeroTacheController.dispose();
    jalonController.dispose();
    tacheController.dispose();

    super.dispose();
  }

  List<TacheModel> tachesList = [];
  String? signature;
  Future<void> getData() async {
    UserModel userModel = await AuthApi().getUserId();
    var taches = await TachesApi().getAllData();
    setState(() {
      signature = userModel.matricule;
      tachesList = taches;
    });
  }

  @override
  Widget build(BuildContext context) {
    final data = ModalRoute.of(context)!.settings.arguments as ProjetModel;
    numeroTache = tachesList
        .where((element) => element.nomProjet == data.nomProjet)
        .length;

    nomProjetController =
        TextEditingController(text: data.nomProjet);
    return Scaffold(
        key: _key,
        drawer: const DrawerMenu(),
        body: SafeArea(
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              if (Responsive.isDesktop(context))
                const Expanded(
                  child: DrawerMenu(),
                ),
              Expanded(
                flex: 5,
                child: Padding(
                  padding: const EdgeInsets.all(p10),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          SizedBox(
                            width: 20.0,
                            child: IconButton(
                                onPressed: () {
                                  Navigator.of(context).pop();
                                },
                                icon: const Icon(Icons.arrow_back)),
                          ),
                          const SizedBox(width: p10),
                          Expanded(
                              flex: 5,
                              child: CustomAppbar(
                                  title: 'Nouvelle tache',
                                  controllerMenu: () =>
                                      _key.currentState!.openDrawer())),
                        ],
                      ),
                      Expanded(
                          child: Scrollbar(
                        controller: _controllerScroll,
                        child: addPageWidget(),
                      ))
                    ],
                  ),
                ),
              ),
            ],
          ),
        ));
  }

  Widget addPageWidget() {
    return Form(
      key: _formKey,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Card(
            elevation: 10,
            child: Padding(
              padding: const EdgeInsets.all(p16),
              child: SizedBox(
                width: Responsive.isDesktop(context)
                    ? MediaQuery.of(context).size.width / 2
                    : MediaQuery.of(context).size.width,
                child: ListView(
                  controller: _controllerScroll,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [PrintWidget(onPressed: () {})],
                    ),
                    const SizedBox(
                      height: p20,
                    ),
                    Row(
                      children: [
                        Expanded(child: nomProjetWidget()),
                        const SizedBox(
                          width: p10,
                        ),
                        Expanded(child: numeroTacheControllerWidget())
                      ],
                    ),
                    Row(
                      children: [
                        // Expanded(child: agentControllerWidget()),
                        const SizedBox(
                          width: p10,
                        ),
                        Expanded(child: jalonControllerWidget())
                      ],
                    ),
                    tacheControllerWidget(),
                    const SizedBox(
                      height: p20,
                    ),
                    BtnWidget(
                        title: 'Soumettre',
                        isLoading: isLoading,
                        press: () {
                          final form = _formKey.currentState!;
                          if (form.validate()) {
                            submit();
                            form.reset();
                          }
                        })
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget nomProjetWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: nomProjetController,
          readOnly: true,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Nom du Projet',
          ),
          keyboardType: TextInputType.text,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget numeroTacheControllerWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: numeroTacheController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Numero Tache',
          ),
          keyboardType: TextInputType.text,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  // Widget agentControllerWidget() {
  //   var listAgentEtRole = widget.projetModel.listAgentEtRole.toList();
  //   List<AgentRoleModel> agentList = [];
  //   for (var item in listAgentEtRole) {
  //     agentList.add(AgentRoleModel.fromJson(item));
  //   }
  //   var dataList = agentList.map((e) => e.agent).toList();
  //   return Container(
  //     margin: const EdgeInsets.only(bottom: p20),
  //     child: DropdownButtonFormField<String>(
  //       decoration: InputDecoration(
  //         labelText: 'Liste agents',
  //         labelStyle: const TextStyle(),
  //         border: OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
  //         contentPadding: const EdgeInsets.only(left: 5.0),
  //       ),
  //       value: agentRole,
  //       isExpanded: true,
  //       items: dataList.map((String value) {
  //         return DropdownMenuItem<String>(
  //           value: value,
  //           child: Text(value),
  //         );
  //       }).toList(),
  //       validator: (value) => value == null ? "Select agents" : null,
  //       onChanged: (value) {
  //         setState(() {
  //           agentRole = value!;
  //         });
  //       },
  //     ),
  //   );
  // }

  Widget jalonControllerWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: jalonController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Jalon',
          ),
          keyboardType: TextInputType.multiline,
          minLines: 1,
          maxLines: 3,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget tacheControllerWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: tacheController,
          keyboardType: TextInputType.multiline,
          minLines: 3,
          maxLines: 10,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Tâches',
          ),
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Future<void> submit() async {
    final tacheModel = TacheModel(
        nomProjet: nomProjetController.text,
        numeroTache: numeroTacheController.text,
        agent: agentRole.toString(),
        jalon: jalonController.text,
        tache: tacheController.text,
        signatureResp: signature.toString(),
        created: DateTime.now(),
        read: false);

    await TachesApi().insertData(tacheModel);
    Navigator.of(context).pop();
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(
      content: const Text("Enregistrer avec succès!"),
      backgroundColor: Colors.green[700],
    ));
  }
}
