import 'dart:async';

import 'package:flutter/material.dart';
import 'package:fokad_admin/src/api/exploitations/projets_api.dart';
import 'package:fokad_admin/src/api/exploitations/versement_projet_api.dart';
import 'package:fokad_admin/src/constants/app_theme.dart';
import 'package:fokad_admin/src/constants/responsive.dart';
import 'package:syncfusion_flutter_charts/charts.dart';

class ChartLineProjet extends StatefulWidget {
  const ChartLineProjet({ Key? key }) : super(key: key);

  @override
  State<ChartLineProjet> createState() => _ChartLineProjetState();
}

class _ChartLineProjetState extends State<ChartLineProjet> {
  List<ChartLineData> chartData = [];
  List<ChartLineData> chartData2 = [];

  double projetsInvestissementfCount = 0.0;
  double versementCount = 0.0;

  @override
  void initState() {
    Timer.periodic(const Duration(milliseconds: 500), ((timer) {
      setState(() {
        getChartData();
        getChartData2();
      });
      
      timer.cancel();
    }));

    super.initState();
  }


  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(p8),
      height: MediaQuery.of(context).size.height / 2,
      child: Material(elevation: 10.0, child: buildAnimationLineChart()),
    );
  }

    ///Get the cartesian chart with line series
  SfCartesianChart buildAnimationLineChart() {
    return SfCartesianChart(
        title: ChartTitle(
            text: "Courbe des projets",
            textStyle: const TextStyle(fontWeight: FontWeight.bold)),
        plotAreaBorderWidth: 0,
        legend: Legend(
            isVisible: true,
            isResponsive: true,
            position: Responsive.isDesktop(context)
                ? LegendPosition.right
                : LegendPosition.bottom),
        primaryXAxis:
            NumericAxis(majorGridLines: const MajorGridLines(width: 0)),
        primaryYAxis: NumericAxis(
            majorTickLines: const MajorTickLines(color: Colors.transparent),
            axisLine: const AxisLine(width: 0),
            minimum: 0,
            maximum: 100),
        series: getDefaultLineSeries());
  }


    /// The method returns line series to chart.
  List<LineSeries<ChartLineData, num>> getDefaultLineSeries() {
    return <LineSeries<ChartLineData, num>>[
      LineSeries<ChartLineData, num>(
          dataSource: chartData,
          name: 'Investissements',
          xValueMapper: (ChartLineData sales, _) => sales.investissement,
          yValueMapper: (ChartLineData sales, _) => sales.versement,
          markerSettings: const MarkerSettings(isVisible: true)),
      LineSeries<ChartLineData, num>(
          dataSource: chartData2,
          name: 'Versements',
          xValueMapper: (ChartLineData sales, _) => sales.investissement,
          yValueMapper: (ChartLineData sales, _) => sales.versement,
          markerSettings: const MarkerSettings(isVisible: true))
    ];
  }




  void getChartData() async {
    var projets = await ProjetsApi().getAllData();
    
    chartData = <ChartLineData>[];
    for (var i in projets) {
      chartData.add(ChartLineData(0, double.parse(i.recetteAttendus)));
    }
  }

  void getChartData2() async {
    var versements = await VersementProjetApi().getAllData();
    chartData2 = <ChartLineData>[];
    for (var i in versements) {
      chartData2.add(ChartLineData(0, double.parse(i.montantVerser)));
    }
  }
}



class ChartLineData {
  ChartLineData(this.investissement, this.versement);
  final double investissement;
  final double versement;
}
