import 'package:flutter/material.dart';
import 'package:fokad_admin/src/api/exploitations/projets_api.dart';
import 'package:fokad_admin/src/constants/app_theme.dart';
import 'package:fokad_admin/src/constants/responsive.dart';
import 'package:fokad_admin/src/models/exploitations/projet_model.dart';
import 'package:fokad_admin/src/navigation/drawer/drawer_menu.dart';
import 'package:fokad_admin/src/navigation/header/custom_appbar.dart';
import 'package:fokad_admin/src/pages/exploitations/projets/components/table_agent_projet.dart';
import 'package:fokad_admin/src/pages/exploitations/taches/add_tache_exp.dart';
import 'package:fokad_admin/src/pages/exploitations/versements/add_versement_projet.dart';
import 'package:fokad_admin/src/widgets/print_widget.dart';
import 'package:fokad_admin/src/widgets/title_widget.dart';
import 'package:intl/intl.dart';
import 'package:routemaster/routemaster.dart';
import 'package:simple_speed_dial/simple_speed_dial.dart';

class DetailProjet extends StatefulWidget {
  const DetailProjet({Key? key, required this.id}) : super(key: key);
  final int id;

  @override
  State<DetailProjet> createState() => _DetailProjetState();
}

class _DetailProjetState extends State<DetailProjet> {
  final ScrollController _controllerScroll = ScrollController();
  bool isLoading = false;

  ProjetModel? projetModel;

  String? nomProjet;
  String? responsable;
  String? objectifs;
  String? description;
  String? resources;
  String? responsabilite;
  String? communication; // somme d'affectation pour le budget
  String? processusVerification;
  String? problemePotientEtRisque;
  String? dateDebutEtFin;
  String? budgetDetail;
  String? recetteAttendus;
  List listAgentEtRole = [];
  String? signature;
  DateTime? created;
  String? typeFinancement;
  bool? approbation;
  bool? finance;
  String? signatureDG;
  String? signatureFin;

  @override
  initState() {
    getData();
    super.initState();
  }

  Future<void> getData() async {
    ProjetModel data = await ProjetsApi().getOneData(widget.id);
    setState(() {
      projetModel = data;
      nomProjet = data.nomProjet;
      responsable = data.responsable;
      objectifs = data.objectifs;
      description = data.description;
      resources = data.resources;
      responsabilite = data.responsabilite;
      communication = data.communication;
      processusVerification = data.processusVerification;
      problemePotientEtRisque = data.problemePotientEtRisque;
      dateDebutEtFin = data.dateDebutEtFin;
      budgetDetail = data.budgetDetail;
      recetteAttendus = data.recetteAttendus;
      listAgentEtRole = data.listAgentEtRole;
      signature = data.signature;
      created = data.created;
      typeFinancement = data.typeFinancement;
      approbation = data.approbation;
      finance = data.finance;
      signatureDG = data.signatureDG;
      signatureFin = data.signatureFin;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        drawer: const DrawerMenu(),
        floatingActionButton: speedialWidget(),
        body: SafeArea(
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (Responsive.isDesktop(context))
                const Expanded(
                  child: DrawerMenu(),
                ),
              Expanded(
                flex: 5,
                child: Padding(
                    padding: const EdgeInsets.all(p10),
                    child: FutureBuilder<ProjetModel>(
                        future: ProjetsApi().getOneData(widget.id),
                        builder: (BuildContext context,
                            AsyncSnapshot<ProjetModel> snapshot) {
                          if (snapshot.hasData) {
                            ProjetModel? data = snapshot.data;
                            return Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    SizedBox(
                                      width: p20,
                                      child: IconButton(
                                          onPressed: () =>
                                              Routemaster.of(context).pop(),
                                          icon: const Icon(Icons.arrow_back)),
                                    ),
                                    const SizedBox(width: p10),
                                    Expanded(
                                      child:
                                          CustomAppbar(title: data!.nomProjet),
                                    ),
                                  ],
                                ),
                                Expanded(
                                    child: Scrollbar(
                                        controller: _controllerScroll,
                                        isAlwaysShown: true,
                                        child: pageDetail(data)))
                              ],
                            );
                          } else {
                            return const Center(
                                child: CircularProgressIndicator());
                          }
                        })),
              ),
            ],
          ),
        ));
  }

  Widget pageDetail(ProjetModel data) {
    return Row(mainAxisAlignment: MainAxisAlignment.center, children: [
      Card(
        elevation: 10,
        child: Container(
          margin: const EdgeInsets.all(p16),
          width: (Responsive.isDesktop(context))
              ? MediaQuery.of(context).size.width / 2
              : MediaQuery.of(context).size.width,
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(p10),
            border: Border.all(
              color: Colors.blueGrey.shade700,
              width: 2.0,
            ),
          ),
          child: ListView(
            controller: _controllerScroll,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  Column(
                    children: [
                      Row(
                        children: [
                          IconButton(
                              tooltip: 'Modifier',
                              onPressed: () {},
                              icon: const Icon(Icons.edit)),
                          PrintWidget(
                              tooltip: 'Imprimer le document', onPressed: () {})
                        ],
                      ),
                      SelectableText(
                          DateFormat("dd-MM-yy").format(data.created),
                          textAlign: TextAlign.start),
                    ],
                  )
                ],
              ),
              dataWidget(data),
              SizedBox(
                height: 500,
                child: ListAgentProjet(listAgentEtRole: listAgentEtRole)
              )
            ],
          ),
        ),
      ),
    ]);
  }

  Widget dataWidget(ProjetModel data) {
    final bodyMedium = Theme.of(context).textTheme.bodyMedium;
    return Padding(
      padding: const EdgeInsets.all(p10),
      child: Column(
        children: [
          Row(
            children: [
              Expanded(
                child: Text('Nom Projet :',
                    textAlign: TextAlign.start,
                    style: bodyMedium!.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText(data.nomProjet,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Responsable :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText(data.responsable,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Objectifs :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText(data.objectifs,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Description :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText(data.description,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Resources :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText(data.resources,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Responsabilite :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText(data.responsabilite,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Communication :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText(data.communication,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Processus de Verification :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText(data.processusVerification,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Problème potient et risque :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText(data.problemePotientEtRisque,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Date de Debut et Fin :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText(
                    data.dateDebutEtFin,
                    textAlign: TextAlign.start,
                    style: bodyMedium),
              )
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Budget detailé :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText(data.budgetDetail,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Recette attendus :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText(data.recetteAttendus,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Signature :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText(data.signature,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Type Financement :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText(data.typeFinancement,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Approbation :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText((data.approbation) ? 'Approuvé' : 'Non Approuvé',
                  textAlign: TextAlign.start, 
                  style: (data.approbation) 
                    ? bodyMedium.copyWith(color: Colors.green.shade700)
                    : bodyMedium.copyWith(color: Colors.red.shade700)
                )
              ),
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Financement :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                  child: SelectableText(
                      (data.finance) ? 'Financé' : 'Non Financé',
                      textAlign: TextAlign.start,
                      style: (data.approbation)
                          ? bodyMedium.copyWith(color: Colors.green.shade700)
                          : bodyMedium.copyWith(color: Colors.red.shade700))),
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Approuvé par :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText(data.signatureDG,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
          Row(
            children: [
              Expanded(
                child: Text('Signé par :',
                    textAlign: TextAlign.start,
                    style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              ),
              Expanded(
                child: SelectableText(data.signatureFin,
                    textAlign: TextAlign.start, style: bodyMedium),
              )
            ],
          ),
        ],
      ),
    );
  }


  SpeedDial speedialWidget() {
    return SpeedDial(
      child: const Icon(
        Icons.menu,
        color: Colors.white,
      ),
      closedForegroundColor: themeColor,
      openForegroundColor: Colors.white,
      closedBackgroundColor: themeColor,
      openBackgroundColor: themeColor,
      speedDialChildren: <SpeedDialChild>[
        SpeedDialChild(
          child: Row(
            children: const [
              Icon(Icons.add),
              Icon(Icons.monetization_on),
            ],
          ),
          foregroundColor: Colors.black,
          backgroundColor: Colors.green.shade700,
          label: 'Versement',
          onPressed: () {
            Navigator.of(context).push(MaterialPageRoute(
                  builder: (context) => AddVersementProjet(projetModel: projetModel!)));
          },
        ),
        SpeedDialChild(
          child: Row(
            children: const [
              Icon(Icons.add),
              Icon(Icons.content_paste_sharp),
            ],
          ),
          foregroundColor: Colors.white,
          backgroundColor: Colors.blue.shade700,
          label: 'Nouvelle tache',
          onPressed: () =>
            Navigator.of(context).push(MaterialPageRoute(
                  builder: (context) => AddTacheExp(projetModel: projetModel!)))
        ),
      ],
    );
  }
}
