import 'dart:async';

import 'package:flutter/material.dart';
import 'package:fokad_admin/src/api/exploitations/versement_projet_api.dart';
import 'package:fokad_admin/src/models/exploitations/projet_model.dart';
import 'package:fokad_admin/src/models/exploitations/versement_projet_model.dart';
import 'package:fokad_admin/src/pages/exploitations/versements/components/detail_versement_projet.dart';
import 'package:fokad_admin/src/widgets/print_widget.dart';
import 'package:fokad_admin/src/utils/class_implemented.dart';
import 'package:fokad_admin/src/widgets/title_widget.dart';
import 'package:intl/intl.dart';
import 'package:pluto_grid/pluto_grid.dart';

class TableVersement extends StatefulWidget {
  const TableVersement({Key? key, required this.projetModel}) : super(key: key);
  final ProjetModel projetModel;

  @override
  State<TableVersement> createState() => _TableVersementState();
}

class _TableVersementState extends State<TableVersement> {
  List<PlutoColumn> columns = [];
  List<PlutoRow> rows = [];
  PlutoGridStateManager? stateManager;
  PlutoGridSelectingMode gridSelectingMode = PlutoGridSelectingMode.row;

  int? id;

  double versementCount = 0.0;

  @override
  void initState() {
    agentsColumn();
    Timer.periodic(const Duration(milliseconds: 500), ((timer) {
      getData();
      agentsRow();
      timer.cancel();
    }));
    super.initState();
  }

  String? signature;
  Future<void> getData() async {
    List<VersementProjetModel?> dataList =
        await VersementProjetApi().getAllData();
    if (!mounted) return;
    setState(() {
      List<VersementProjetModel?> versementList = dataList
          .where(
              (element) => element!.nomProjet == widget.projetModel.nomProjet)
          .toList();

      for (var item in versementList) {
        versementCount += double.parse(item!.montantVerser);
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Expanded(
          child: PlutoGrid(
            columns: columns,
            rows: rows,
            onRowDoubleTap: (PlutoGridOnRowDoubleTapEvent tapEvent) {
              final dataList = tapEvent.row!.cells.values;
              final idPlutoRow = dataList.elementAt(0);
              Navigator.of(context).push(MaterialPageRoute(
                  builder: (context) =>
                      DetailVersementProjet(id: idPlutoRow.value)));
            },
            onLoaded: (PlutoGridOnLoadedEvent event) {
              stateManager = event.stateManager;
              stateManager!.setShowColumnFilter(true);
            },
            createHeader: (PlutoGridStateManager header) {
              return Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const TitleWidget(title: "Versements"),
                  PrintWidget(onPressed: () {})
                ],
              );
            },
            configuration: PlutoGridConfiguration(
              columnFilterConfig: PlutoGridColumnFilterConfig(
                filters: const [
                  ...FilterHelper.defaultFilters,
                  // custom filter
                  ClassFilterImplemented(),
                ],
                resolveDefaultColumnFilter: (column, resolver) {
                  if (column.field == 'pieceJustificative') {
                    return resolver<ClassFilterImplemented>()
                        as PlutoFilterType;
                  } else if (column.field == 'montantVerser') {
                    return resolver<ClassFilterImplemented>()
                        as PlutoFilterType;
                  } else if (column.field == 'montantEnLettre') {
                    return resolver<ClassFilterImplemented>()
                        as PlutoFilterType;
                  } else if (column.field == 'typeVersement') {
                    return resolver<ClassFilterImplemented>()
                        as PlutoFilterType;
                  } else if (column.field == 'created') {
                    return resolver<ClassFilterImplemented>()
                        as PlutoFilterType;
                  }
                  return resolver<PlutoFilterTypeContains>() as PlutoFilterType;
                },
              ),
            ),
          ),
        ),
        totalSolde()
      ],
    );
  }

  Widget totalSolde() {
    final bodyMedium = Theme.of(context).textTheme.bodyMedium;
    return Card(
      color: Colors.red.shade700,
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Row(
          children: [
            SelectableText('Total vers√©: ',
                style: bodyMedium!.copyWith(
                    fontWeight: FontWeight.bold, color: Colors.white)),
            SelectableText(
                '${NumberFormat.decimalPattern('fr').format(versementCount)} \$',
                style: bodyMedium.copyWith(
                    fontWeight: FontWeight.bold, color: Colors.white))
          ],
        ),
      ),
    );
  }

  void agentsColumn() {
    columns = [
      PlutoColumn(
        readOnly: true,
        title: 'Id',
        field: 'id',
        type: PlutoColumnType.number(),
        enableRowDrag: true,
        enableContextMenu: false,
        enableDropToResize: true,
        titleTextAlign: PlutoColumnTextAlign.left,
        width: 100,
        minWidth: 80,
      ),
      PlutoColumn(
        readOnly: true,
        title: 'Piece Justificative',
        field: 'pieceJustificative',
        type: PlutoColumnType.text(),
        enableRowDrag: true,
        enableContextMenu: false,
        enableDropToResize: true,
        titleTextAlign: PlutoColumnTextAlign.left,
        width: 150,
        minWidth: 150,
      ),
      PlutoColumn(
        readOnly: true,
        title: 'Montant Verser',
        field: 'montantVerser',
        type: PlutoColumnType.text(),
        enableRowDrag: true,
        enableContextMenu: false,
        enableDropToResize: true,
        titleTextAlign: PlutoColumnTextAlign.left,
        width: 150,
        minWidth: 150,
      ),
      PlutoColumn(
        readOnly: true,
        title: 'Montant En Lettre',
        field: 'montantEnLettre',
        type: PlutoColumnType.text(),
        enableRowDrag: true,
        enableContextMenu: false,
        enableDropToResize: true,
        titleTextAlign: PlutoColumnTextAlign.left,
        width: 150,
        minWidth: 150,
      ),
      PlutoColumn(
        readOnly: true,
        title: 'Type de Versement',
        field: 'typeVersement',
        type: PlutoColumnType.text(),
        enableRowDrag: true,
        enableContextMenu: false,
        enableDropToResize: true,
        titleTextAlign: PlutoColumnTextAlign.left,
        width: 150,
        minWidth: 150,
      ),
      PlutoColumn(
        readOnly: true,
        title: 'Date',
        field: 'created',
        type: PlutoColumnType.text(),
        enableRowDrag: true,
        enableContextMenu: false,
        enableDropToResize: true,
        titleTextAlign: PlutoColumnTextAlign.left,
        width: 150,
        minWidth: 150,
      ),
    ];
  }

  Future agentsRow() async {
    List<VersementProjetModel?> dataList =
        await VersementProjetApi().getAllData();
    var data = dataList
        .where((element) => element!.nomProjet == widget.projetModel.nomProjet);

    if (mounted) {
      setState(() {
        for (var item in data) {
          rows.add(PlutoRow(cells: {
            'id': PlutoCell(value: item!.id),
            'pieceJustificative': PlutoCell(value: item.pieceJustificative),
            'montantVerser': PlutoCell(value: "${NumberFormat.decimalPattern('fr').format(double.parse(item.montantVerser))} \$"),
            'montantEnLettre': PlutoCell(value: item.montantEnLettre),
            'typeVersement': PlutoCell(value: item.typeVersement),
            'created': PlutoCell(
                value: DateFormat("dd-MM-yy HH:mm").format(item.created))
          }));
          stateManager!.resetCurrentState();
        }
      });
    }
  }
}
