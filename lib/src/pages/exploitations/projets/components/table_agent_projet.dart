import 'dart:async';

import 'package:flutter/material.dart';
import 'package:fokad_admin/src/models/exploitations/projet_model.dart';
import 'package:fokad_admin/src/widgets/print_widget.dart';
import 'package:fokad_admin/src/widgets/title_widget.dart';
import 'package:fokad_admin/src/utils/class_implemented.dart';
import 'package:pluto_grid/pluto_grid.dart';

class ListAgentProjet extends StatefulWidget {
  const ListAgentProjet({Key? key, required this.listAgentEtRole})
      : super(key: key);
  final List listAgentEtRole;

  @override
  State<ListAgentProjet> createState() => _ListAgentProjetState();
}

class _ListAgentProjetState extends State<ListAgentProjet> {
  List<PlutoColumn> columns = [];
  List<PlutoRow> rows = [];
  PlutoGridStateManager? stateManager;
  PlutoGridSelectingMode gridSelectingMode = PlutoGridSelectingMode.row;

  int? id;

  @override
  void initState() {
    agentsColumn();
    Timer.periodic(const Duration(milliseconds: 500), ((timer) {
      agentsRow();
      timer.cancel();
    }));

    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return PlutoGrid(
      columns: columns,
      rows: rows,
      onLoaded: (PlutoGridOnLoadedEvent event) {
        stateManager = event.stateManager;
        stateManager!.setShowColumnFilter(true);
      },
      createHeader: (PlutoGridStateManager header) {
        return Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            const TitleWidget(title: "Liste agents & rôle"),
            PrintWidget(onPressed: () {})
          ],
        );
      },
      configuration: PlutoGridConfiguration(
        columnFilterConfig: PlutoGridColumnFilterConfig(
          filters: const [
            ...FilterHelper.defaultFilters,
            // custom filter
            ClassFilterImplemented(),
          ],
          resolveDefaultColumnFilter: (column, resolver) {
            if (column.field == 'agent') {
              return resolver<ClassFilterImplemented>() as PlutoFilterType;
            } else if (column.field == 'role') {
              return resolver<ClassFilterImplemented>() as PlutoFilterType;
            }
            return resolver<PlutoFilterTypeContains>() as PlutoFilterType;
          },
        ),
      ),
    );
  }

  void agentsColumn() {
    columns = [
      PlutoColumn(
        readOnly: true,
        title: 'Agent',
        field: 'agent',
        type: PlutoColumnType.text(),
        enableRowDrag: true,
        enableContextMenu: false,
        enableDropToResize: true,
        titleTextAlign: PlutoColumnTextAlign.left,
        width: 200,
        minWidth: 150,
      ),
      PlutoColumn(
        readOnly: true,
        title: 'Rôle',
        field: 'role',
        type: PlutoColumnType.text(),
        enableRowDrag: true,
        enableContextMenu: false,
        enableDropToResize: true,
        titleTextAlign: PlutoColumnTextAlign.left,
        width: 200,
        minWidth: 150,
      ),
    ];
  }

  Future agentsRow() async {
    List<AgentRoleModel> dataList = [];
    for (var item in widget.listAgentEtRole) {
      dataList.add(AgentRoleModel.fromJson(item));
    }
    if (mounted) {
      setState(() {
        for (var item in dataList) {
          rows.add(PlutoRow(cells: {
            'agent': PlutoCell(value: item.agent),
            'role': PlutoCell(value: item.role),
          }));
        }
        stateManager!.resetCurrentState();
      });
    }
  }
}
