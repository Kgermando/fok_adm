import 'package:auto_size_text/auto_size_text.dart';
import 'package:badges/badges.dart';
import 'package:flutter/material.dart';
import 'package:fokad_admin/src/api/auth/auth_api.dart';
import 'package:fokad_admin/src/api/exploitations/projets_api.dart';
import 'package:fokad_admin/src/models/exploitations/projet_model.dart';
import 'package:fokad_admin/src/models/users/user_model.dart';
import 'package:fokad_admin/src/navigation/drawer/drawer_widget.dart';
import 'package:fokad_admin/src/routes/routes.dart';
import 'package:routemaster/routemaster.dart';

class ExploitationNav extends StatefulWidget {
  const ExploitationNav({Key? key, required this.pageCurrente})
      : super(key: key);
  final String pageCurrente;

  @override
  State<ExploitationNav> createState() => _ExploitationNavState();
}

class _ExploitationNavState extends State<ExploitationNav> {
  bool isOpenExp = false;
  int itemCount = 0;

  int projetInactifs = 0;

  @override
  void initState() {
    getData();

    super.initState();
  }

   UserModel user = UserModel(
      nom: '-',
      prenom: '-',
      email: '-',
      telephone: '-',
      matricule: '-',
      departement: '-',
      servicesAffectation: '-',
      fonctionOccupe: '-',
      role: '5',
      isOnline: false,
      createdAt: DateTime.now(),
      passwordHash: '-',
      succursale: '-');

  Future<void> getData() async {
    var userModel = await AuthApi().getUserId();
    List<ProjetModel> data = await ProjetsApi().getAllData();

    setState(() {
      user = userModel;
      projetInactifs = data.length;
    });
  }

  @override
  Widget build(BuildContext context) {
    final bodyLarge = Theme.of(context).textTheme.bodyLarge;
    final bodyText1 = Theme.of(context).textTheme.bodyText1;

    double userRole = double.parse(user.role);


    itemCount = projetInactifs;

    return ExpansionTile(
      leading: const Icon(Icons.widgets, size: 30.0),
      title: AutoSizeText('Exploitations', maxLines: 1, style: bodyLarge),
      initiallyExpanded: false,
      onExpansionChanged: (val) {
        setState(() {
          isOpenExp = !val;
        });
      },
      trailing: const Icon(Icons.arrow_drop_down),
      children: [
        if (userRole <= 2)
        DrawerWidget(
            selected: widget.pageCurrente == ExploitationRoutes.expDashboard,
            icon: Icons.dashboard,
            sizeIcon: 20.0,
            title: 'Dashboard',
            style: bodyText1!,
            onTap: () {
              Routemaster.of(context).replace(ExploitationRoutes.expDashboard);
              // Navigator.of(context).pop();
            }),
        if (userRole <= 2)
        DrawerWidget(
            selected: widget.pageCurrente == ExploitationRoutes.expDD,
            icon: Icons.manage_accounts,
            sizeIcon: 20.0,
            title: 'Directeur de departement',
            style: bodyText1!,
            badge: Badge(
              showBadge: (itemCount >= 1) ? true : false,
              badgeColor: Colors.teal,
              badgeContent: Text('$itemCount',
                  style: const TextStyle(fontSize: 10.0, color: Colors.white)),
              child: const Icon(Icons.notifications),
            ),
            onTap: () {
              Routemaster.of(context).replace(ExploitationRoutes.expDD);
              // Navigator.of(context).pop();
            }),
        DrawerWidget(
            selected: widget.pageCurrente == ExploitationRoutes.expProjet,
            icon: Icons.feed,
            sizeIcon: 20.0,
            title: 'Projets',
            style: bodyText1!,
            onTap: () {
              Routemaster.of(context).replace(ExploitationRoutes.expProjet);
              // Navigator.of(context).pop();
            }),
        DrawerWidget(
            selected: widget.pageCurrente == ExploitationRoutes.expTache,
            icon: Icons.content_paste_sharp,
            sizeIcon: 20.0,
            title: 'Taches',
            style: bodyText1,
            onTap: () {
              Routemaster.of(context).replace(ExploitationRoutes.expTache);
              // Navigator.of(context).pop();
            }),
        DrawerWidget(
            selected: widget.pageCurrente == ExploitationRoutes.expVirement,
            icon: Icons.monetization_on,
            sizeIcon: 20.0,
            title: 'Virements',
            style: bodyText1,
            onTap: () {
              Routemaster.of(context).replace(ExploitationRoutes.expVirement);
              // Navigator.of(context).pop();
            }),
        DrawerWidget(
            selected: widget.pageCurrente == RhRoutes.rhPerformence,
            icon: Icons.multiline_chart_sharp,
            sizeIcon: 20.0,
            title: 'Performences',
            style: bodyText1,
            onTap: () {
              Routemaster.of(context).replace(RhRoutes.rhPerformence);
              // Navigator.of(context).pop();
            }),
      ],
    );
  }
}
